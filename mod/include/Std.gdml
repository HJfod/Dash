
// On structs, every non-binded member without a default value will be required
// On decls, only properties explicitly marked required aren't optional

// All .gdml files do `import "Std.gdml";` by default

// todo: pretypecheck to collect struct and fun names

export extern fun print(msg: string) -> void;

export struct CCPoint {
    x: float;
    y: float;
}

fun CCPoint::member(this) {}

export struct CCSize {
    width: float;
    height: float;
}

export fun (point: CCPoint) as CCSize {
    return CCSize {
        width: point.x,
        height: point.y
    };
}

export fun /(point: CCPoint, factor: int)   -> CCPoint => { x: point.x / factor, y: point.y / factor };
export fun /(point: CCPoint, factor: float) -> CCPoint => { x: point.x / factor, y: point.y / factor };
export fun *(point: CCPoint, factor: int)   -> CCPoint => { x: point.x * factor, y: point.y * factor };
export fun *(point: CCPoint, factor: float) -> CCPoint => { x: point.x * factor, y: point.y * factor };
 
export fun as(size: CCSize) -> CCPoint {
    return CCPoint {
        x: size.width,
        y: size.height
    };
}
export fun (size: CCSize / factor: int) -> CCSize {
    return { width: size.width / factor, height: size.height / factor };
}
export fun (size: CCSize / factor: float) -> CCSize {
    return { width: size.width / factor, height: size.height / factor };
}
export fun (size: CCSize * factor: int) -> CCSize {
    return { width: size.width * factor, height: size.height * factor };
}
export fun (size: CCSize * factor: float) -> CCSize {
    return { width: size.width * factor, height: size.height * factor };
}

export struct CCRect {
    x: float;
    y: float;
    width: float;
    height: float;
    origin: CCPoint {
        // dependent properties make it so when the dependency is updated, 
        // this property is updated aswell
        depends x;
        depends y;
        get => {
            x: this.x;
            y: this.y;
        }
        set(value) => {
            this.x = value.x;
            this.y = value.y;
        }
    }
    // bindings offer very neat shorthand syntax for the above :3
    size: CCSize <=> { width, height };
}

export struct ccColor3B {
    r: int;
    g: int;
    b: int;
}

export struct ccColor4B {
    r: int;
    g: int;
    b: int;
    a: int;
    rgb: ccColor3B <=> { r, g, b };
}

export extern let winSize: CCSize;

export extern enum Layout {
    Row {}
    Column {}
}
export using RowLayout = Layout::Row;
export using ColumnLayout = Layout::Column;

export extern decl CCNode {
    id: string;
    x: float;
    y: float;
    pos: CCPoint <=> { x, y };
    width: float;
    height: float;
    size: CCSize <=> { width, height };
    layout: Layout;
}

// extern decl CCLayer {}

// extern decl CCMenu extends CCLayer {}

// extern decl CCMenuItemSpriteExtra {
//     clicked: fun () => void;
// }

export extern decl CCLabelBMFont extends CCNode {
    text: string;
    font: string;
}

// extern decl CCSprite {
//     sprite: string;
//     frame: string;
//     color: ccColor3B;
//     required sprite || frame;
// }

// extern decl ButtonSprite {
//     required text: string;
//     font: string;
//     bg: string;
// }
