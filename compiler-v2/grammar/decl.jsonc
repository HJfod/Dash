{
    "$visibility-token": ["public", "private"],
    "$qualifier-token": ["$visibility-token", "extern"],
    "$item-decl-token": ["$qualifier-token", "var", "fun", "let", "struct"],
    "#public-visibility": {
        "grammar": [{ "match": "public" }]
    },
    "#private-visibility": {
        "grammar": [{ "match": "private" }]
    },
    "#visibility-qualifier": {
        "grammar": [
            { "if": { "peek": "public" },  "then": [{ "return": "#public-visibility" }] },
            { "if": { "peek": "private" }, "then": [{ "return": "#private-visibility" }] },
            { "expected": "visibility qualifier" }
        ]
    },
    "#qualifiers": {
        "members": ["?extern", "?visibility"],
        "grammar": [
            {
                "if": { "peek": ["public", "private"] },
                "then": [{ "match": "#visibility-qualifier", "into": "visibility" }]
            },
            { "if": { "match": "extern", "into": "extern" }, "then": [] }
        ]
    },
    "#var-decl": {
        "members": ["qualifiers", "name", "?type", "?value"],
        "grammar": [
            {
                "if": { "not": { "set": "qualifiers" } },
                "then": [{ "match": "#qualifiers", "into": "qualifiers" }]
            },
            { "match": "var" },
            { "match": "ident", "into": "name" },
            {
                "if": { "match": ":" },
                "then": [
                    { "match": "#type-expr", "into": "type" }
                ]
            },
            {
                "if": { "match": "=" },
                "then": [
                    { "match": "#expr", "into": "value" }
                ]
            }
        ],
        "check": [
            { "equal": [":type", ":value"] },
            { "new-entity": ":name", "type": ":type" },
            { "result": "void" }
        ]
    },
    "#const-decl": {
        "members": ["qualifiers", "name", "?type", "?value"],
        "grammar": [
            {
                "if": { "not": { "set": "qualifiers" } },
                "then": [{ "match": "#qualifiers", "into": "qualifiers" }]
            },
            { "match": "let" },
            { "match": "ident", "into": "name" },
            {
                "if": { "match": ":" },
                "then": [
                    { "match": "#type-expr", "into": "type" }
                ]
            },
            {
                "if": { "match": "=" },
                "then": [
                    { "match": "#expr", "into": "value" }
                ]
            }
        ],
        "check": [
            { "equal": [":type", ":value"] },
            { "new-entity": ":name", "type": ":type" },
            { "result": "void" }
        ]
    },
    // `this` parameter in a function
    "#fun-receiver-param": {
        "members": ["?type"],
        "grammar": [
            { "match": "this" },
            {
                "if": { "match": ":" },
                "then": [{ "match": "#type-expr", "into": "type" }]
            },
            {
                "if": { "match": "=" },
                "then": [{ "error": "The `this` parameter may not have a default value" }]
            }
        ]
    },
    "#fun-param": {
        "members": ["name", "type", "?default-value"],
        "grammar": [
            { "match": "ident", "into": "name" },
            { "match": ":" },
            { "match": "#type-expr", "into": "type" },
            {
                "if": { "match": "=" },
                "then": [
                    { "match": "#expr", "into": "default-value" }
                ]
            }
        ]
    },
    "#fun-decl": {
        "members": ["qualifiers", "?name", "+params", "?return-type", "?body"],
        "grammar": [
            {
                "if": { "not": { "set": "qualifiers" } },
                "then": [{ "match": "#qualifiers", "into": "qualifiers" }]
            },
            { "match": "fun" },
            // Anonymous functions are permitted
            {
                "if": { "peek": "$ident-token" },
                "then": [{ "match": "#ident-path", "into": "name" }]
            },
            {
                "match": "(...)",
                "inner": [{
                    "while": { "not": { "peek": "eof" } },
                    "then": [
                        {
                            "if": { "peek": "this" },
                            "then": [{ "match": "#fun-receiver-param", "into": "params" }],
                            "else": [{ "match": "#fun-param", "into": "params" }]
                        },
                        // Allow trailing commas. Expect EOF if no comma provided
                        { "if": { "match": "," }, "then": [], "else": [{ "match": "eof:)" }] }
                    ]
                }]
            },
            {
                "if": { "match": "->" },
                "then": [{ "match": "#type-expr", "into": "return-type" }]
            },
            {
                "if": { "peek": "{...}" },
                "then": [{ "match": "#block", "into": "body" }]
            }
        ]
    },
    "#getter-decl": {
        "members": ["body"],
        "grammar": [
            { "match": "get" },
            { "match": "=>" },
            { "match": "#expr", "into": "body" }
        ]
    },
    "#setter-decl": {
        "members": ["param", "body"],
        "grammar": [
            { "match": "set" },
            {
                "match": "(...)",
                "inner": [
                    { "match": "ident", "into": "param" },
                    { "if": { "peek": ":" }, "then": [{ "error": "Setters may not have explicit types" }] },
                    { "if": { "match": "," }, "then": [] },
                    { "match": "eof:)" }
                ]
            },
            { "match": "=>" },
            { "match": "#expr", "into": "body" }
        ]
    },
    "#struct-field": {
        "members": ["name", "type", "+accessors", "?value"],
        "grammar": [
            { "match": "ident", "into": "name" },
            { "match": ":" },
            { "match": "#type-expr", "into": "type" },
            {
                "if": { "peek": "{...}" },
                "then": [{
                    "match": "{...}",
                    "inner": [
                        {
                            "while": { "peek": ["get", "set"] },
                            "then": [
                                {
                                    "if": { "peek": "get" },
                                    "then": [{ "match": "#getter-decl", "into": "accessors" }]
                                },
                                {
                                    "if": { "peek": "set" },
                                    "then": [{ "match": "#setter-decl", "into": "accessors" }]
                                }
                            ]
                        },
                        { "match": "eof:}" }
                    ]
                }],
                "else": [
                    {
                        "if": { "match": "=" },
                        "then": [{ "match": "#expr", "into": "value" }]
                    },
                    // Match semicolon
                    { "match": ";" }
                ]
            }
        ]
    },
    "#struct-decl": {
        "members": ["qualifiers", "name", "+fields"],
        "grammar": [
            {
                "if": { "not": { "set": "qualifiers" } },
                "then": [{ "match": "#qualifiers", "into": "qualifiers" }]
            },
            { "match": "struct" },
            { "match": "ident", "into": "name" },
            {
                "match": "{...}",
                "inner": [{
                    "while": { "not": { "peek": "eof" } },
                    "then": [{ "match": "#struct-field", "into": "fields" }]
                }]
            }
        ]
    },
    "#--match-item": {
        "members": ["--qualifiers"],
        "grammar": [
            {
                "if": { "peek": "$qualifier-token" },
                "then": [{ "match": "#qualifiers", "into": "--qualifiers" }]
            },
            { "if": { "peek": "var" },    "then": [{ "return": "#var-decl", "with": { "qualifiers": "--qualifiers" } }] },
            { "if": { "peek": "let" },    "then": [{ "return": "#const-decl", "with": { "qualifiers": "--qualifiers" } }] },
            { "if": { "peek": "fun" },    "then": [{ "return": "#fun-decl", "with": { "qualifiers": "--qualifiers" } }] },
            { "if": { "peek": "struct" }, "then": [{ "return": "#struct-decl", "with": { "qualifiers": "--qualifiers" } }] },
            { "expected": "item declaration" }
        ]
    }
}
